// Generated by LiveScript 1.4.0
(function(){
  var ForList, CopyDefaults, CreateNewFn, Compose, Events, ShowList, TM, Async, Main;
  ForList = function(Default, UserSpecific, type){
    var Combined;
    type == null && (type = "merge-right");
    switch (type) {
    case "merge-left":
      Combined = Default.concat(UserSpecific);
      break;
    case "merge-right":
      Combined = UserSpecific.concat(Default);
    }
    return Combined;
  };
  CopyDefaults = function(Default, UserSpecific, type){
    var Keys, i$, len$, I, results$ = [];
    type == null && (type = "merge-right");
    Keys = Object.keys(Default);
    for (i$ = 0, len$ = Keys.length; i$ < len$; ++i$) {
      I = Keys[i$];
      if (UserSpecific[I] === undefined) {
        if (typeof Default[I] === "object") {
          if (Array.isArray(Default[I])) {
            UserSpecific[I] = [];
            results$.push(UserSpecific[I] = ForList(Default[I], UserSpecific[I], type));
          } else {
            UserSpecific[I] = {};
            results$.push(CopyDefaults(Default[I], UserSpecific[I]));
          }
        } else {
          results$.push(UserSpecific[I] = Default[I]);
        }
      } else {
        if (typeof Default[I] === "object") {
          if (Array.isArray(Default[I])) {
            results$.push(UserSpecific[I] = ForList(Default[I], UserSpecific[I], type));
          } else {
            results$.push(CopyDefaults(Default[I], UserSpecific[I]));
          }
        }
      }
    }
    return results$;
  };
  CreateNewFn = function(OldFn, Custom){
    return function(EventOb){
      var Output;
      Output = Custom(EventOb);
      if (Output === undefined) {
        return OldFn(EventOb);
      } else {
        return OldFn(EventOb, Output);
      }
    };
  };
  Compose = function(Elem, Custom, type){
    var i$, ref$, len$, I, OldFn, NewFn, results$ = [], results1$ = [];
    if (Elem[type] === undefined) {
      Elem[type] = {};
      for (i$ = 0, len$ = (ref$ = Object.keys(Custom)).length; i$ < len$; ++i$) {
        I = ref$[i$];
        results$.push(Elem[type][I] = Custom[I]);
      }
      return results$;
    } else {
      for (i$ = 0, len$ = (ref$ = Object.keys(Custom)).length; i$ < len$; ++i$) {
        I = ref$[i$];
        if (Elem[type][I] === undefined) {
          results1$.push(Elem[type][I] = Custom[I]);
        } else {
          OldFn = Elem[type][I];
          NewFn = CreateNewFn(OldFn, Custom[I]);
          results1$.push(Elem[type][I] = NewFn);
        }
      }
      return results1$;
    }
  };
  Events = function(update){
    return function(EventName){
      return function(){
        if (arguments.length === 1) {
          return update(EventName, arguments[0]);
        } else {
          return update(arguments[0], arguments[1]);
        }
      };
    };
  };
  ShowList = function(List){
    return console.log(JSON.stringify(List, null, "\t"));
  };
  TM = require("gsap");
  Async = {};
  Async.to = function(Elem, Time, Ob){
    return function(done){
      Ob.onComplete = done;
      return TM.to(Elem, Time, Ob);
    };
  };
  Async.fromTo = function(Elem, Time, From, To){
    return function(done){
      To.onComplete = done;
      return TM.fromTo(Elem, Time, From, To);
    };
  };
  Async.setTimeout = function(t){
    return function(f){
      return setTimeout(f, t);
    };
  };
  Main = {};
  Main.Async = Async;
  Main.ShowList = ShowList;
  Main.CopyDefaults = CopyDefaults;
  Main.Compose = Compose;
  Main.Events = Events;
  module.exports = Main;
}).call(this);
